점프 투 자바

5장 객체지향 프로그래밍
05-1 클래스

Animai cat = new Animal;

여기서 Animal은 선언된 클래스, cat은 instance, new은 객체를 생성한다는 의미

객체 생성한 cat으로 메소드(함수), 변수를 불러오는 방법은 

cat.name = "hobby"; // 객체 변수
cat.setName("hobby"); // 메소드(함수)

클래스에서 가장 중요한 부분은 그 뭐라해도 이 객체 변수의 값이 독립적으로 유지된다는 점이다. 
사실 이 점이 바로 클래스 존재의 이유이기도 하다. 
객체 지향적(Object Oriented)이라는 말의 의미도 곱씹어 보면 결국 
이 객체 변수의 값이 독립적으로 유지되기 때문에 가능한 것이다.

05-2 메소드 (Method)

입력 값을 다른 말로 메소드의 인수, 입력인수 등으로 말하기도 하고 
리턴 값을 출력 값, 결과 값, 돌려주는 값 등으로 말하기도 한다.

05-3 Call by value 


05-4 상속 -> 예제 연습

클래스 상속을 위해서는 extends 라는 키워드를 사용한다. 

부모 클래스를 상속받은 자식 클래스는 부모 클래스의 기능에 더하여 좀 더 많은 기능을 갖도록 설계한다.

IS-A 관계
"Dog is a Animal" 과 같이 말할 수 있는 관계를 IS-A 관계라고 한다.
하지만 이 반대의 경우, 즉 부모 클래스로 만들어진 객체를 자식 클래스의 자료형으로는 사용할 수 없다.

자바에서 만드는 모든 클래스는 Object라는 클래스를 상속받게 되어 있다.

메소드 오버라이딩 (Method overriding)
: 입력항목이 다른 경우 동일한 이름의 메소드를 만들 수 있는데 이것을 어려운 말로 
메소드 오버로딩(method overloading)이라고 부른다.

다중 상속
: 클래스가 동시에 하나 이상의 클래스를 상속받는 것을 뜻한다. C++, 파이썬 등 
많은 언어들이 다중 상속을 지원하지만 자바는 다중 상속을 지원하지 않는다. 

05-5 생성자
: 메소드명이 클래스명과 동일하고 리턴 자료형이 없는 메소드를 생성자(Constructor)

생성자의 규칙
1. 클래스명과 메소드명이 동일하다.
2. 리턴타입을 정의하지 않는다.

생성자를 사용했을 때 얻게 되는 이득은 변수 초기화 등과 같은 필수적인 행동을 
객체 생성시에 제어할 수 있게 된다는 점이다.

default 생성자
: 만약 클래스에 생성자가 하나도 없다면 컴파일러는 자동으로 위와같은 디폴트 생성자를 추가한다. 
하지만 사용자가 작성한 생성자가 하나라도 구현되어 있다면 컴파일러는 디폴트 생성자를 추가하지 않는다.

생성자 오버로딩(Overloading)
: 여러개의 입력항목이 다른 생성자

05-6 인터페이스 -> 예제 연습

: 인터페이스의 표현은 public interface 인터페이스명으로 나타내고
기존 클래스와 연동하려면 implements 인터페이스명으로 클래스명 뒤에 붙이면 된다.

객체가 한 개 이상의 자료형 타입을 갖게되는 특성을 다형성(폴리모피즘)

인터페이스의 메소드는 이름과 출려에 대한 정의만 있고 그 내용은 없다.
구현할 메소드는 인터페이스를 implements한 클래스에 구현해야 한다.
c와 c++에서의 헤더파일 역할과 유사하다고 생각하면 된다.
*.h파일은 함수명와 입출력에 대한 정의만 하고 *.c, *.cpp등에서 함수 내용을 구현한다.

인터페이스의 중요성
- 공통적인 메소드의 구현이 필요했던 클래스에 인터페이스를 이용하면 단 한개의 메소드로 구현이 가능하며,
즉 리소스도 줄일수 있을 뿐더러 가장 중요한 점은 클래스간의 독립성을 만들고 유지시키는 역할을 하는게 핵심이다.

클래스의 메소드처럼 입력값의 자료형 타입이 다를 경우 메소드 명을 동일하게 사용할 수 있다. 
이런 것을 메소드 오버로딩(Method overloading)이라고 한다.

05-7 다형성 (폴리모피즘, Polymorphism)
: 인터페이스는 콤마(,)를 이용하여 여러개를 implements 할 수 있다.
하나의 객체가 여러개의 자료형 타입을 가질 수 있는 것을 객체지향 세계에서는 다형성, 폴리모피즘(Polymorphism)

인터페이스는 일반 클래스와는 달리 extends 를 이용하여 여러개의 인터페이스(Predator, Barkable)를 
동시에 상속할 수 있다. 즉, 다중 상속이 지원된다.

05-8 추상클래스 -> 인터페이스와의 차이점 좀더 예제들을 살펴보고 구분할 필요가 있다.
